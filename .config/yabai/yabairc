#!/usr/bin/env sh
source "$HOME/.config/machine.sh"

# Useful keyboard scripts
# https://gist.github.com/dgrebb/d3ca843c61d9cabfdd30bf89976e454e

# view the last lines of the error log
# tail -f /tmp/yabai_$USER.err.log

# view the last lines of the debug log
# tail -f /tmp/yabai_$USER.out.log

# Unload the macOS WindowManager process
launchctl unload -F /System/Library/LaunchAgents/com.apple.WindowManager.plist >/dev/null 2>&1 &

yabai -m signal --add event=dock_did_restart action="sudo yabai --load-sa"
sudo yabai --load-sa

yabai -m signal --add event=window_focused action="sketchybar --trigger window_focus"

# Source a list of displays and their properties
# https://github.com/koekeishiya/yabai/issues/1060#issuecomment-990431179
source $HOME/.config/yabai/displays.sh

# Set number of displays to configure spaces for

# Display change signals
yabai -m signal --add event=display_added action="sleep 2 && $HOME/.config/yabai/create_spaces.sh"
yabai -m signal --add event=display_removed action="sleep 1 && $HOME/.config/yabai/create_spaces.sh"
yabai -m signal --add event=window_created action="sketchybar --trigger windows_on_spaces"
yabai -m signal --add event=window_destroyed action="sketchybar --trigger windows_on_spaces"

# Set up spaces and bind window focus to SketchyBar
$HOME/.config/yabai/create_spaces.sh

yabai -m config external_bar all:35:0 \
  window_border off \
  mouse_follows_focus off \
  focus_follows_mouse autofocus \
  window_zoom_persist off \
  window_placement second_child \
  window_topmost off \
  window_shadow float \
  window_opacity on \
  window_opacity_duration 0.2 \
  active_window_opacity 0.95 \
  normal_window_opacity 0.67 \
  window_border_width 1 \
  window_border_hidpi off \
  window_border_radius 11 \
  window_border_blur off \
  window_animation_duration 0.3 \
  active_window_border_color 0x45ffffff \
  normal_window_border_color 0xff494d64 \
  insert_feedback_color 0xff9dd274 \
  split_ratio 0.50 \
  auto_balance off \
  mouse_modifier fn \
  mouse_action1 move \
  mouse_action2 resize \
  mouse_drop_action swap \
  \
  top_padding 33 \
  bottom_padding 33 \
  left_padding 33 \
  right_padding 33 \
  window_gap 11

yabai -m config --space 1 top_padding 133 \
  bottom_padding 133 \
  left_padding 233 \
  right_padding 233

yabai -m config --space 2 top_padding 133 \
  bottom_padding 133 \
  left_padding 233 \
  right_padding 233

yabai -m config --space 3 top_padding 133 \
  bottom_padding 133 \
  left_padding 233 \
  right_padding 233 \
  window_gap 333

# focus window after active space changes
yabai -m signal --add event=space_changed action="yabai -m window --focus \$(yabai -m query --windows --space | jq .[0].id)"
# focus window after active display changes
yabai -m signal --add event=display_changed action="yabai -m window --focus \$(yabai -m query --windows --space | jq .[0].id)"

# Assign apps to spaces

# TODO: Conditional for 1 Display
# yabai -m signal --add event=display_added action="if [[ \"\$(yabai -m query --displays | jq \".[\$YABAI_DISPLAY_ID].uuid\")\" =~ \"$NOTCH_UUID\" ]]; then yabai -m config external_bar main:$NORMAL_BAR:0; elif [[ \"\$(yabai -m query --displays | jq '.[].uuid')\" =~ \"$NOTCH_UUID\" ]]; then yabai -m config external_bar main:$NORMAL_BAR:0; else yabai -m config external_bar all:$NORMAL_BAR:0; fi"
# yabai -m signal --add event=display_removed action="if [[ \"\$(yabai -m query --displays | jq \".[\$YABAI_DISPLAY_ID].uuid\")\" =~ \"$NOTCH_UUID\" ]]; then yabai -m config external_bar all:$NORMAL_BAR:0; elif [[ \"\$(yabai -m query --displays | jq '.[].uuid')\" =~ \"$NOTCH_UUID\" ]]; then yabai -m config external_bar all:$NOTCH_BAR:0; fi"

# global settings
# if [[ "$(yabai -m query --displays | jq '.[].uuid')" =~ "$NOTCH_UUID" ]]; then if [ "$(yabai -m query --displays | jq length)" -gt "1" ]; then yabai -m config external_bar main:$NORMAL_BAR:0; else yabai -m config external_bar all:$NOTCH_BAR:0; fi else yabai -m config external_bar all:$NORMAL_BAR:0; fi

# TODO: 3 Displays
yabai -m rule --add app="^(Music)$" space=1
yabai -m rule --add app="^(Firefox)$" space=2
yabai -m rule --add app="^(OmniFocus|Mail|Calendar|Notion|Discord)$" space=3
yabai -m rule --add app="^(iTerm)$" space=4
yabai -m rule --add app="^(Visual Studio Code)$" space=7

# Exclude problematic apps from being managed ----
yabai -m rule --add app="^(CleanMyMac X|Airfoil|OmniFocusWidgetsExtension|Messages|Calendar|1Password Helper|1Password Helper (GPU)|1Password Helper (Renderer)|1Password Browser Helper|^1Password$|Mail|Fantastical|Fantastical Helper|com.flexibits.fantastical.core.libical-XPC|OmniFocus|Music|Keyboard Maestro|CopyClip 2|TextExpander|xScope|Classic Color Meter|Digital Color Meter|Drafts|LuLu|Calculator|Software Update|Dictionary|VLC|System Preferences|System Settings|zoom.us|Photo Booth|Archive Utility|Python|LibreOffice|App Store|Steam|Alfred|Activity Monitor)$" manage=off
yabai -m rule --add label="Finder" app="^Finder$" title="(Co(py|nnect)|Move|Info|Pref)" manage=off
yabai -m rule --add label="Safari" app="^Safari$" title="^(General|(Tab|Password|Website|Extension)s|AutoFill|Se(arch|curity)|Privacy|Advance)$" manage=off
yabai -m rule --add label="About This Mac" app="System Information" title="About This Mac" manage=off
yabai -m rule --add label="Select file to save to" app="^Inkscape$" title="Select file to save to" manage=off

if [[ "$MACHINE" == 'work' ]]; then
  yabai -m config layout float
else
  yabai -m config layout bsp
fi

echo "yabai configuration loaded.."
